---
import MainLayout from '../layouts/MainLayout.astro';
---

<MainLayout title="Register - Star Shop">
  <h1>Register</h1>
  <form id="registerForm" class="form-container">
    <div>
      <label for="username">Username:</label>
      <input type="text" id="username" name="username" required>
    </div>
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required>
    </div>
    <div>
      <label for="password">Password:</label>
      <input type="password" id="password" name="password" required>
    </div>
    <button type="submit">Register</button>
  </form>
  <p id="message"></p>
</MainLayout>

<style>
  .form-container {
    background-color: #6702c6; /* Soft background color */
    border-radius: 10px; /* Rounded borders */
    padding: 20px; /* Padding around the form */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Soft shadow */
    max-width: 500px; /* Max width for the form */
    margin: auto; /* Center the form */
    margin-top: 40px; /* Space above the form */
  }

  h1 {
    text-align: center; /* Center the heading */
    color: #333; /* Dark text color */
  }

  label {
    display: block;
    margin-bottom: 5px;
    font-family: 'Arial', sans-serif; /* Change to your desired font */
    font-size: 16px; /* Adjust the font size */
    font-weight: bold; /* Make the font bold */
    color: #000000; /* Soft text color */
  }

  input {
    border: 1px solid #ccc; /* Light border */
    border-radius: 5px; /* Rounded input borders */
    padding: 10px; /* Padding inside inputs */
    width: 95%; /* Width */
    margin-bottom: 15px; /* Space between inputs */
    transition: border-color 0.3s; /* Smooth transition for border color */
  }

  input:focus {
    border-color: #4CAF50; /* Change border color on focus */
    outline: none; /* Remove default outline */
  }

  button {
    background-color: #4CAF50; /* Soft green color */
    color: white; /* Text color */
    border: none; /* No border */
    border-radius: 5px; /* Rounded button borders */
    padding: 10px; /* Padding inside button */
    cursor: pointer; /* Pointer cursor on hover */
    width: 100%; /* Full width */
    font-weight: bold; /* Bold text */
    transition: background-color 0.3s; /* Smooth transition for background color */
  }

  button:hover {
    background-color: #45a049; /* Darker green on hover */
  }

  #message {
    text-align: center; /* Center the message */
    color: red; /* Error message color */
  }
</style>

<script>
  const registerForm = document.getElementById('registerForm') as HTMLFormElement;
  const messageElement = document.getElementById('message') as HTMLParagraphElement;

  if (registerForm) {
    registerForm.addEventListener('submit', async (e) => {
      e.preventDefault(); // Prevent the default form submission
      const formData = new FormData(e.target as HTMLFormElement);
      try {
        const response = await fetch('/api/register', {
          method: 'POST', // Ensure this is POST
          body: JSON.stringify(Object.fromEntries(formData)),
          headers: {
            'Content-Type': 'application/json'
          }
        });
        const data = await response.json(); // Parse the JSON response
        if (data.success) {
          // Store the JWT token in local storage
          localStorage.setItem('token', data.token);
          messageElement.textContent = 'Registration successful! Redirecting to login...';
          messageElement.style.color = 'green';
          setTimeout(() => {
            window.location.href = '/login'; // Redirect to login after success
          }, 2000);
        } else {
          messageElement.textContent = data.message || 'Registration failed. Please try again.';
          messageElement.style.color = 'red';
        }
      } catch (error) {
        console.error('Registration error:', error); // Log any errors
        messageElement.textContent = 'An error occurred. Please try again.';
        messageElement.style.color = 'red';
      }
    });
  }
</script>
